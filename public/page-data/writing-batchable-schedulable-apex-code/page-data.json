{"componentChunkName":"component---src-templates-blog-post-js","path":"/writing-batchable-schedulable-apex-code","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Writing Batchable, Schedulable Apex Code","html":"<figure class=\"kg-card kg-embed-card\"><iframe src=\"https://www.youtube.com/embed/0Yqxp68RD0E?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" name=\"fitvid0\" style=\"box-sizing: inherit; margin: 0px auto !important; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 20px; vertical-align: middle; position: absolute; top: 0px; left: 0px; width: 700px; height: 393.75px;\"></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>This is critical knowledge for any Salesforce developer to understand and understand well. I personally could have avoided a lot of unforeseen errors in the past if I had only learned earlier when and how to properly utilize batch Apex!</p><p>From an administrator’s perspective, I also prefer to use scheduled classes to do things such as ensure data quality. In my mind, something simple like the example in the video advances usability and cleanliness a lot, but isn’t necessarily they type of functionality which would warrant a trigger. Instead, it’s the type of code which could run daily or even weekly and still prove really useful to the end users.</p><p>In general, the use of batch classes helps you avoid errors having to do with the insertion and update of records en masse. In addition, the use of reusable utility functions helps a developer separate and silo functionality and avoid repeating themselves.</p><h3 id=\"video-breakdown\">Video Breakdown</h3><p>This video will teach you how to do the following:</p><ol><li>Write a utility function that can be used in other Apex classes throughout your Salesforce Organization.</li><li>Write a batchable, schedulable class which utilizes that utility function.</li><li>Do a quick test to ensure the class works, then schedule that class to run on a daily/weekly/monthly basis.</li><li>Monitor the executions of that scheduled batch class to confirm it is working correctly!</li></ol><h3 id=\"code-samples\">Code Samples</h3><p>Here’s the code utilized in the video above:</p><h4 id=\"lead-utility-class-and-function\">Lead Utility Class and Function</h4><pre><code class=\"language-java\">global class LeadUtilities {\n\n    global static String capitalizeName (String unformattedName) {\n        /* Turn a name like john DOE into John Doe. */\n        List nameParts = unformattedName.split('(\\\\s| |\\\\-|\\\\.){1,}');\n        List cleanNameParts = new List();\n        for (String n: nameParts) {\n            String clean = n.toLowerCase();\n            String cleanCap = clean.capitalize();\n            cleanNameParts.add(cleanCap);\n        } return String.join(cleanNameParts, ' ');\n    }\n        \n}</code></pre><h4 id=\"batch-class-definition\">Batch Class Definition</h4><pre><code class=\"language-java\">global class BatchCapitalizeNames implements Schedulable, Database.Batchable {\n\n    global Database.QueryLocator start (Database.BatchableContext BC) {\n        String query = 'SELECT Id, FirstName, LastName FROM Lead WHERE CreatedDate = LAST_N_DAYS:7';\n        return Database.getQueryLocator(query);\n    }\n    \n    global void execute (Database.BatchableContext BC, List&lt;Lead&gt; scope) {\n                \n        for (Lead l: scope) {\n            l.FirstName = LeadUtilities.capitalizeName(l.FirstName);\n            l.LastName = LeadUtilities.capitalizeName(l.LastName);\n        }\n        \n        try {\n            update scope;\n        } catch (Exception e) {\n            System.debug(e.getMessage());\n        }\n        \n    }\n    \n    global void finish (Database.BatchableContext BC) {\n\t\t// Leave this blank in this example! Not necessary.\n    }\n    \n    global void execute (SchedulableContext SC) {\n\t\tDatabase.executeBatch(new BatchCapitalizeNames());\n    }\n    \n}</code></pre><p>That’s all for this one, thanks for watching and reading!</p>","published_at":"June 11, 2018","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"writing-batchable-schedulable-apex-code","previous":{"slug":"generating-mock-data-with-mockaroo","title":"Generating Mock Data with Mockaroo","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"everything-you-need-to-know-about-custom-objects","title":"Everything You Need to Know about Custom Objects","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}