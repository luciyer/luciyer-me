{"componentChunkName":"component---src-templates-blog-post-js","path":"/pushing-changes-properly","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Pushing Changes Properly","html":"<p><em><em>Quick Note: I have <a href=\"http://159.203.118.11/pushing-changes-properly/_wp_link_placeholder\">another post</a> which goes into how to create a sandbox and use a changeset to deploy from a sandbox environment to production.</em></em></p><h3 id=\"introduction-types-of-salesforce-orgs\">Introduction: Types of Salesforce Orgs</h3><p>It‚Äôs important to begin by noting which types of ‚Äúorgs‚Äù ‚Äì organizations for short ‚Äì are available. Remember, org types are not license types (Professional, Enterprise, Unlimited), nor are they Salesforce Products or Apps (Sales Cloud, Service Cloud, etc.)</p><h3 id=\"three-flavors\">Three Flavors</h3><p></p><h4 id=\"production\">Production</h4><p>Production orgs are where the vast majority of Salesforce users spend their time. They are instances of Salesforce that are live.</p><p>This definition alone doesn‚Äôt make a lot of sense, but if you read on and understand what Sandboxes and Developer orgs are used for, this will make a lot more sense üôÇ</p><h4 id=\"sandbox\">Sandbox</h4><p>A sandbox is a copy of a Production org. There are a couple types of Sandboxes, but for us right now it‚Äôs not important to touch on those. It‚Äôs only important to mention that a sandbox is connected to a production org, and will have the same settings and components as a production org, but without any data or with only a small subset of that org‚Äôs data.</p><h4 id=\"developer\">Developer</h4><p>A developer org is a free org that anyone can sign up for to either test out Salesforce or to build on the platform. Salesforce Developers might use a developer org (yup) to build an app that they later list on the AppExchange for others to install and utilize. Or, if they‚Äôre like me, they might just use a developer org to test out ideas and projects, design tutorials, or store some basic functionalities they want to reference later.</p><h3 id=\"more-on-sandboxes\">More on Sandboxes</h3><p>Because they‚Äôre really important.</p><p>To expand on the definition given above, a Sandbox a copy of your Salesforce instance (your ‚Äúproduction org‚Äù) that developers or administrators use to test changes before putting them in the hands of end users. The process of Salesforce development relies heavily on Sandboxes. Nonetheless, it‚Äôs actually pretty simple, and usually goes something like this:</p><p>1. Requirements are gathered</p><p>2. A solution is designed and discussed</p><p>3. An Admin or Developer (or a team of admins or developers) builds the solution within a Sandbox</p><p>4. The solution is tested to ensure it‚Äôs functioning properly</p><p>5. If all is well, the solution is ‚Äú<strong><strong>deployed</strong></strong>,‚Äù or ‚Äú<strong><strong>pushed</strong></strong>‚Äù into the production org</p><h3 id=\"for-example-\">For Example‚Ä¶</h3><p>A Salesforce Administrator is working for a very large organization ‚Äì hundreds or thousands of active Salesforce users are creating and editing records each day. He‚Äôs been asked to write a trigger that performs some custom logic each time an Opportunity is created or updated.</p><p><em><em>You‚Äôll notice we‚Äôve jumped past steps one and two ‚Äì these are steps where people have meetings and talk. No explanation necessary üôÇ</em></em></p><p>If the administrator had the ability to start developing this trigger in the current, active Salesforce org, there‚Äôs a chance that during the course of development, the unfinished trigger will be active and could be making changes to new and existing records.</p><p>This is a nightmare scenario for a number of reasons ‚Äì the biggest of which is that you may have potentially diminished the integrity of the data within the production organization ‚Äì data that is used by users and leaderships to make decisions. Yikes. Similarly grave, you may have accidentally made a bunch of changes, additions, or deletions that you now need to clean up. Instead of spending time building things, your friendly Salesforce admin is running queries trying to figure out what changed and what he or she can salvage.</p><h4 id=\"enter-the-friendly-sandbox-\">Enter the friendly Sandbox.</h4><p>Instead of building in production, our admin goes to his setup panel and creates a new Sandbox. He logs into the new Sandbox and starts writing his code. Along the way, he creates and edits some records to test his solution. When he‚Äôs satisfied it‚Äôs working, he‚Äôll write some test coverage (more on this in another post), execute those tests, and if it all goes according to plan, he‚Äôll package the trigger and the test class into a <em><em>changeset</em></em>, and load it into the production org.</p><p>Then he‚Äôll log into the production org, find the loaded changeset, validate it, and implement it. Validate and implement are complicated words, they‚Äôre really just the name of two buttons he‚Äôll have to press if he‚Äôs done the development properly within the Sandbox. Once the code is implemented, it‚Äôll be alive and working within the production org as designed ‚Äì with much less risk of causing harm.</p><p>Of course, it‚Äôs very difficult to be 100% certain that changes won‚Äôt cause something to break unexpectedly. But by using a sandbox, we‚Äôre at least able to have a safe environment to work until we‚Äôre ready to deploy.</p><h3 id=\"final-thoughts-tl-dr-\">Final Thoughts (TL;DR)</h3><p>One thing which always intimidated me was the process of deployment ‚Äì the one explained above. I actually had a lot of fun learning to write Apex code and build Visualforce pages, even to build apps and workflows and load data in and out of orgs, but I never wanted to touch changesets and write test coverage.</p><p>Most of my fear was just misunderstanding. I thought the process would be tedious and awful ‚Äì it‚Äôs slow at times, and frustrating, but it is worth it to save the headache of breaking something important in an org that is being actively used.</p><p>Final thoughts: use a Sandbox. Because what happens in Sandbox, stays in Sandbox. You can break things and sleep easy.</p><p>Hope this helps.</p>","published_at":"November 04, 2017","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"pushing-changes-properly","previous":{"slug":"photographs-la-rural","title":"Exposici√≥n La Rural","primary_tag":{"name":"photos","slug":"photos"}},"next":{"slug":"time-based-workflow-rules","title":"Time-Based Workflow Rules","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}