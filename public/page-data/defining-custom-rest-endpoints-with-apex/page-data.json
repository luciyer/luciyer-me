{"componentChunkName":"component---src-templates-blog-post-js","path":"/defining-custom-rest-endpoints-with-apex","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Defining Custom REST Endpoints with Apex","html":"<figure class=\"kg-card kg-embed-card\"><iframe src=\"https://www.youtube.com/embed/uO3B9Qmg4qc?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\" name=\"fitvid0\" style=\"box-sizing: inherit; margin: 0px auto !important; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 20px; vertical-align: middle; position: absolute; top: 0px; left: 0px; width: 700px; height: 393.75px;\"></iframe></figure><p>This is by far one of the most useful things Iâ€™ve learned to do as a Salesforce Developer. Almost any application that requires Salesforce to interface with another platform can be permitted by opening a REST endpoint (or a number of endpoints) that allows the two platforms to send and receive data in a reasonable and scalable manner. As a developer, or even as an administrator with a decent grasp of Apex, you can master this skill!</p><p>Final Code Here:</p><pre><code class=\"language-java\">@RestResource(urlMapping='/UserLogin/*')\nglobal class REST_UserLogin {\n\n    @HttpGet\n    global static List&lt;External_Login__c&gt; getLogins () {\n        List&lt;External_Login__c&gt; externalLogins = [SELECT Id, CreatedDate, Contact__r.Email, Session_Length__c FROM External_Login__c];\n        return externalLogins;\n    }\n    \n    @HttpPost\n    global static void createNewLoginRecord (String systemName, String userEmail, Integer sessionLength) {\n        Contact c = null;\n        try {\n            c = [SELECT Id, Email FROM Contact WHERE Email =: userEmail].get(0);\n            External_Login__c newLogin = new External_Login__c();\n            newLogin.System__c = systemName;\n            newLogin.Contact__c = c.Id;\n            newLogin.Session_Length__c = sessionLength;\n            insert newLogin;\n            RestContext.response.responseBody = Blob.valueOf('Success: Record created with ID ' + newLogin.Id);\n        } catch (Exception e) {\n            RestContext.response.responseBody = Blob.valueOf('Error: ' + e.getMessage());\n        }\n    }\n    \n    @HttpPut\n    global static void updateLoginRecord () {\n        // Leaving this empty or removing altogether -- not useful in this context. \n    }\n    \n    @HttpDelete\n    global static void deleteLoginRecordById () {\n        String paramId = RestContext.request.params.get('id');\n        try {\n            External_Login__c loginToDelete = [SELECT Id FROM External_Login__c WHERE Id =: paramId];\n            delete loginToDelete;\n            RestContext.response.responseBody = Blob.valueOf('Success: Record deleted.');\n        } catch (Exception e) {\n            RestContext.response.responseBody = Blob.valueOf('Error: ' + e.getMessage());\n        }\n    }\n    \n}</code></pre>","published_at":"December 13, 2017","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"defining-custom-rest-endpoints-with-apex","previous":{"slug":"web-to-lead","title":"Generating a Web to Lead Form","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"photoessay-maverick","title":"Maverick: William J. Zupan","primary_tag":{"name":"photos","slug":"photos"}}}}}