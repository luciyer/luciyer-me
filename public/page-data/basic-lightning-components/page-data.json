{"componentChunkName":"component---src-templates-blog-post-js","path":"/basic-lightning-components","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Getting Started with Lightning Components","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/MTvKJOA9DYU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>I’m not embarrassed to admit that I avoided learning about Lightning and building lightning components for quite a long time. To illustrate the intensity of my disdain for Lightning, despite Salesforce’s persistent tries to change my orgs to lightning experience (LE), I constantly changed back to “Classic.” I still have moments where I use classic, because frankly when doing administration tasks, it can be very annoying to see a classic page iframed into LE. Plus annoying things happen like in certain contexts, when you press “Save &amp; New” instead of “Save” (and then “New”), the page header loads but the rest never appears, and you have to refresh! C’mon, Salesforce.</p><p>Okay, rant over. Adapt or die, right? I bit the bullet and learned, mostly because I was required to do so by a project.</p><p>Lightning is still very new to me and the documentation is occasionally lacking — what I mean is, it’s easy to find documentation of the various bits and pieces, but finding examples that pull everything together in a way that’s relevant and based on a real-world scenario? Not so easy. Hopefully this can begin to fill that gap.</p><p>We will build upon this component in further tutorials — so this is an important place to start.</p><h3 id=\"the-scenario\">The Scenario</h3><p>To give a realistic example, let’s create a lightning component that lists recently used Accounts. We could use it in various places in our Salesforce org, as part of lightning applications or on the home page, for example.</p><p>I like to start from the backend and move to the frontend. We will create three pieces, in the following order:</p><ol><li>An Apex Controller</li><li>A Javascript Controller</li><li>A Lightning Component</li></ol><p>I’m going to break this into pages so it’s easier to follow. Let’s get started by navigating to the next page, where we’ll build the Apex Controller which retrieves our data.</p><h3 id=\"the-apex-controller\">The Apex Controller</h3><pre><code class=\"language-java\">public class LtngAccountListController {\n\n  @AuraEnabled public List&lt;Account&gt; accList {get; set;}\n  \n  @AuraEnabled\n  public static LtngAccountListController getListData () {\n\n      LtngAccountListController controller = new LtngAccountListController();\n\n      controller.accList = [\n          SELECT Id, Name, LastModifiedDate\n          FROM Account\n          ORDER BY LastModifiedDate DESC\n      ];\n      \n      return controller;\n  }\n    \n}</code></pre><p>That should all be pretty straightforward, with a few exceptions:</p><ol><li>We need any data and functions that will be called from our component to be <code>@AuraEnabled</code>.</li><li>Instead of having a constructor, <code>getListData()</code> will create an instance of <code>LtngAccountListController</code> and return it.</li></ol><p>Let’s keep going, slowly!</p><h3 id=\"the-javascript-controller\">The Javascript Controller</h3><p>We’ll create the Javascript controller that will pass the account list from the backend (Apex) to the frontend (our Lightning Component).</p><pre><code class=\"language-js\">({\n  getRecordList : function(component, event, helper) {\n      var action = component.get(\"c.getListData\");\n      action.setCallback(this, function(response) {\n          var state = response.getState();\n          if (state === \"SUCCESS\") {\n              var storeResponse = response.getReturnValue();\n          \tcomponent.set(\"v.accountList\", storeResponse.accList);\n          }   \n      }); \n      $A.enqueueAction(action);      \n  }\n})</code></pre><p>Obviously we need to mention a few things here.</p><ol><li>We specify that our <code>action</code> is our function in our Apex class, <code>getListData()</code>.</li><li>We’re going to set <code>v.accountList</code> on our frontend to hold the list of accounts we’ve retrieved. This still doesn’t exist, so we’ll make it now.</li></ol><h3 id=\"the-lightning-component\">The Lightning Component</h3><pre><code class=\"language-html\">&lt;aura:component controller=\"LtngAccountListController\"&gt;\n\t\n    &lt;aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.getRecordList}\" /&gt;\n    \n    &lt;aura:attribute name=\"accountList\" type=\"List\"/&gt;\n\n    &lt;div class=\"slds-box slds-theme--default\"&gt;\n    &lt;/div&gt;\n\n&lt;/aura:component&gt;</code></pre><p>Notice here our <code>&lt;aura:handler&gt;</code> is going to call our Javascript controller. Our Javascript controller is going to call our Apex Controller to query the accounts we want. Then it’s going to store those values in the <code>&lt;aura:attribute&gt;</code> that we created called <code>accountList</code>.</p><p>We also left an empty <code>&lt;div&gt;</code> — that’s where we’ll put our beautiful list of accounts. Let’s do that now.</p><p>First, a simple title:</p><pre><code class=\"language-html\">&lt;lightning:layout&gt;\n  &lt;lightning:layoutItem padding=\"around-small\"&gt;\n    &lt;div class=\"page-section page-header\"&gt;\n      &lt;h2 class=\"panel-title slds-text-heading--medium\"&gt;\n        Recently Modified Accounts\n      &lt;/h2&gt;\n    &lt;/div&gt;\n  &lt;/lightning:layoutItem&gt;\n&lt;/lightning:layout&gt;</code></pre><p>Now, we’re going to use <code>&lt;aura:iteration&gt;</code> along with <code>&lt;lightning:card&gt;</code> to create a basic but good-looking list.</p><pre><code class=\"language-html\">&lt;lightning:layout&gt;\n    &lt;lightning:layoutItem padding=\"around-small\"&gt;\n        &lt;aura:iteration items=\"{!v.accountList}\" var=\"acc\"&gt;\n            &lt;lightning:card title=\"{!acc.Name}\" iconName=\"standard:account\" class=\"control-width\"&gt;\n                &lt;aura:set attribute=\"actions\"&gt;\n                    &lt;a href=\"{!'/lightning/r/Account/' + acc.Id + '/view'}\" target=\"_blank\"&gt;\n                        &lt;lightning:button label=\"Open\"/&gt;\t\n                    &lt;/a&gt;\n                &lt;/aura:set&gt;\n                &lt;p class=\"slds-p-horizontal_small\"&gt;\n                    Last Edited: &lt;lightning:formattedDateTime value=\"{!acc.LastModifiedDate}\"/&gt;\n                &lt;/p&gt;\n            &lt;/lightning:card&gt;\n        &lt;/aura:iteration&gt;\n    &lt;/lightning:layoutItem&gt;\n&lt;/lightning:layout&gt;</code></pre><p>Again, the above two snippets will go inside of our previously empty <code>&lt;div&gt;</code>.</p><p>The code should look like this (I’ve removed the above sections to keep the code readable):</p><pre><code class=\"language-html\">&lt;aura:component controller=\"LtngAccountListController\"&gt;\n\t\n    &lt;aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.getRecordList}\" /&gt;\n    &lt;aura:attribute name=\"accountList\" type=\"List\"/&gt;\n    \n    &lt;div class=\"slds-box slds-theme--default\"&gt;\n    \n        &lt;lightning:layout&gt;\n            &lt;lightning:layoutItem padding=\"around-small\"&gt;\n              &lt;!-- Clipped - Title --&gt;\n            &lt;/lightning:layoutItem&gt;\n        &lt;/lightning:layout&gt;\n    \n        &lt;lightning:layout&gt;\n            &lt;lightning:layoutItem padding=\"around-small\"&gt;\n              &lt;!-- Clipped - Cards --&gt;\n            &lt;/lightning:layoutItem&gt;\n        &lt;/lightning:layout&gt;\n                \n    &lt;/div&gt;\n&lt;/aura:component&gt;</code></pre><p>Now we just need a way to preview what we’ve built. In the developer console, Navigate to <strong><strong>File &gt; New &gt; Lightning Application</strong></strong>. Create a new Lightning Application. Then add your component:</p><pre><code class=\"language-html\">&lt;aura:application extends=\"force:slds\"&gt;\n    &lt;c:LtngAccountList /&gt;\n&lt;/aura:application&gt;</code></pre><p>Click the button on the right side which says “<strong><strong>Update Preview</strong></strong>.”</p><p>Wee!</p><h3 id=\"conclusion\">Conclusion</h3><p>Hey, look, you made a lightning component! It wasn’t so hard, I hope. There are various other pieces that will require creation as the complexity of your lightning components increases. The most common will be an additional Javascript class which holds helper functions, a stylesheet that allows you to tweak the default styles or to create your own from scratch.</p><p>In a further tutorial we’ll expand on this lightning component, adding additional functionality and making it emit events so that we can have it interact with <em><em>other</em></em> lightning components in a seamless manner.</p><p>Hope this was helpful — thanks for reading and/or watching!</p>","published_at":"January 12, 2019","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"basic-lightning-components","previous":{"slug":"introduction-to-sfdc-guide","title":"Introduction to SFDC Guide","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"salesforce-custom-settings-a-godsend","title":"Custom Settings: A Godsend","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}