{"componentChunkName":"component---src-templates-blog-post-js","path":"/time-based-workflow-rules","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Time-Based Workflow Rules","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/7-C3QkM3UMQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"video-overview\">Video Overview</h3><p>Watch the video above for a look at a real-life scenario where time-based workflow rules can be utilized.</p><p><strong><strong>Note:</strong></strong> I’ve been using Process builder often recently. Although it’s not without some drawbacks, it provides some of the functionality here as well. It provides time-based options for scheduling events and transactions on the platform, but not necessarily with business hours. It’s also extensible via <em><em>Invocable </em></em>Apex classes. Check out <a href=\"http://sfdc.guide/posts/a-quick-look-at-process-builder/\">this post</a> for an intro!</p><p>Code to the very simple trigger used is as follows:</p><pre><code class=\"language-java\">trigger SetPromptContactTime on Lead (before insert) {\n    BusinessHours bh = [SELECT Id FROM BusinessHours WHERE Name = 'My Business Hours'];\n    for (Lead newLead: Trigger.new) {\n        Datetime nowDate = Datetime.now();\n        Long interval = 24*60*60*1000;\n        Datetime expireDate = BusinessHours.add(bh.Id, nowDate, interval);\n        newLead.Prompt_Contact_By__c = expireDate;\n    }\n}</code></pre><p>We must use a trigger to set this date because workflow rules don’t honor business hours settings, unfortunately. If business hours aren’t particularly necessary for your use case, consider skipping the creation of a custom field and using a standard one like <code>CreatedDate</code> instead.</p><p>Additionally, the shortest interval you can use is 1 hour. However, there’s still a workaround if you need a shorter interval. If you want a workflow rule to run 5 minutes after the creation of a record, for example, you can follow the process but set the datetime for -55 minutes (55 minutes prior to the <code>CreatedDate</code>), and create a rule to run 1 hour <em><em>after</em></em> that datetime. As always, scheduling can be a bit finnicky, so make sure you test your creations or design solutions that aren’t extremely time-sensitive.</p><p>Lastly, recall that <code>Prompt_Contact_By__c</code> is a custom field of type Datetime that we created, and <code>'My Business Hours'</code> is the name of the business hours object we created. You could also query business hours by Id, and instead of using <code>Datetime.now()</code>, you could use the <code>CreatedDate</code> by changing the trigger to execute <code>after insert</code>.</p>","published_at":"November 28, 2017","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"time-based-workflow-rules","previous":{"slug":"pushing-changes-properly","title":"Pushing Changes Properly","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"getting-started-with-business-hours","title":"Getting Started with Business Hours","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}