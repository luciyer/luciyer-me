{"componentChunkName":"component---src-templates-blog-post-js","path":"/salesforce-custom-settings-a-godsend","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Custom Settings: A Godsend","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/9txE5OxoO8k?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>You can think of custom settings as custom objects which are designed to hold static data or limited numbers of records. Generally, they’re used to store reference data (Custom List Settings) or custom application and code settings (Custom Hierarchy Settings).</p><p>I use these all the time — they give me a more user-friendly way to store settings for the custom components and classes I build, and they allow admins to “tweak” without having to see any code at all.</p><h3 id=\"setup-note\">Setup Note</h3><p>First, I’d like to make quick note. Depending on your org, “List” settings may not be enabled by default. To enable them, as you should, navigate to:</p><p><strong><strong>Setup &gt; Data &gt; Schema Settings</strong></strong></p><p>…and activate the “Manage List Custom Settings Type” toggle.</p><p>Okay, we should be ready to get started. Navigate to the next page where we’ll look at Hierarchy Settings.</p><h3 id=\"hierarchy-settings\">Hierarchy Settings</h3><p>First, let’s talk about Hierarchy Settings. Salesforce does a pretty decent job in its <a href=\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_customsettings.htm\">documentation</a> of explaining the role of custom settings:</p><blockquote><em><em>A type of custom setting that uses a built-in hierarchical logic that lets you “personalize” settings for specific profiles or users. The hierarchy logic checks the organization, profile, and user settings for the current user and returns the most specific, or “lowest,” value. In the hierarchy, settings for an organization are overridden by profile settings, which, in turn, are overridden by user settings.</em></em><br></blockquote><p>All of this is the very precise way of saying that you should use Hierarchy settings to store custom application settings that you want to reference in your Apex classes. These settings come with the added bonus of being able to discriminate based on the logged in user, so you can do things like enforce permissions to specific data or functionality of custom applications.</p><p>So let’s do just that; let’s create some settings for a hypothetical form which will give us as administrators an easy way to set some defaults.</p><p>Navigate to <strong><strong>Setup &gt; Custom Code &gt; Custom Settings</strong></strong> and click <strong><strong>New</strong></strong>. Label and name your object and make sure you keep Setting Type as <strong><strong>Hierarchy</strong></strong>. I named by object “Form Settings.”</p><p>I’m going to make a new custom field (Type = Checkbox, Default = Unchecked) called “Display Form,” and another (Type = Text, Length = 255, Required = True) called “Form Title.” </p><p>If I click <strong><strong>Manage</strong></strong> and then click <strong><strong>New</strong></strong> I can create a new org-wide default. I’ll set Display Form to “True” by checking the box, and name my form “Signup Form.”</p><p>Now, in order to use these settings in an application, I can query using SOQL. If I have one instance, I can access it like so:</p><pre><code class=\"language-sql\">SELECT Id, Display_Form__c, Form_Title__c FROM Form_Settings__c</code></pre><p>If I have multiple instances and want to query based on the logged-in user’s profile, I have a method I can use:</p><pre><code class=\"language-java\">Id userProfileId = [\n    SELECT Id \n    FROM Profile \n    WHERE Id =: UserInfo.getProfileId() \n    LIMIT 1\n];\nForm_Settings__c formSettings = Form_Settings__c.getInstance(userProfileId);</code></pre><p>Alright! Let’s move on to take a look at <strong><strong>List Settings</strong></strong>.</p><h3 id=\"list-settings\">List Settings</h3><blockquote><em><em>A type of custom setting that provides a reusable set of static data that can be accessed across your organization. If you use a particular set of data frequently within your application, putting that data in a list custom setting streamlines access to it. Data in list settings does not vary with profile or user, but is available organization-wide.</em></em></blockquote><blockquote><em><strong>Again, from the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_customsettings.htm\">documentation</a> here.</strong></em></blockquote><p>A perfect example is geographical data; it is static data (relatively), but often needs to be stored as an object. For example, if our application needed to use data about the 50 United States, we could make a custom list setting called something like <code>State__c</code> and it would have the standard field <code>Name</code>, custom fields of <code>USPS_Abbreviation__c</code>, <code>Time_Zone__c</code>, and <code>Sales_Tax_Rate__c</code>.</p><p>You get the idea. Our hypothetically application could use <code>Sales_Tax_Rate__c</code> to calculate how prices should be adjusted state by state, and it could use <code>Time_Zone__c</code> to determine which stores are open at a given moment.</p><p>A quick note: a List custom setting is <em><em><strong><strong>not</strong></strong></em></em> appropriate for storing holiday information. In this specific case, you’d want to use a custom Business Hours object. You can learn more about Business Hours from the video I made here.</p><p>So, let’s create a custom list setting for states, and once we’ve done that, let’s load the data into the org using <a href=\"https://sfdc.guide/posts/basics-of-workbench/\">Workbench</a>.</p><p>Navigate to <strong><strong>Setup &gt; Custom Code &gt; Custom Settings</strong></strong> and click <strong><strong>New</strong></strong>. Label and name your object and make sure you change Setting Type to <strong><strong>List</strong></strong>.</p><p>By default, we have a <code>Name</code> field that we can use to hold the name of the state. So, we only need to add one Custom Field for <code>USPS Code</code> (Type = Text, Length = 2, Required = Yes, Unique = Yes).</p><p>That’s it! We’re ready to load our data. Let’s visit <a href=\"https://workbench.developerforce.com/\">Workbench</a> and log in using Salesforce.</p><p>Navigate to <strong><strong>Data &gt; Insert</strong></strong> and find <code>US_States__c</code> in the Object Type dropdown, and select your CSV file.</p><p>Map the fields as shown and insert the records. You’ll see that 51 new records are created (can’t forget about Washington D.C.!). Now let’s go back to <strong><strong>Custom Settings</strong></strong> in the Salesforce setup menu, and click on <strong><strong>Manage</strong></strong> next to “US States.”</p><p>You should see 51 records have been loaded. Congrats! Now we just need to understand how to reference them. Just as I would with a normal SObject, I can query for these records using SOQL. Below is a sample utility class which will retrieve all 51 abbreviations and names for me.</p><pre><code class=\"language-java\">global class StatesUtility {\n    global static List&lt;US_States__c&gt; getStateData () {\n        return [SELECT USPS_Code__c, Name FROM US_States__c];\n    }\n}</code></pre><p>Usage like so:</p><pre><code class=\"language-java\">List&lt;US_States__c&gt; usStates = StatesUtility.getStateData();</code></pre><p>That’s it! Pretty straightforward. Conclusion on the next page.</p><h3 id=\"conclusion\">Conclusion</h3><p>Both types of settings have distinct use cases, but as a developer you should leverage these to make your life and the life of any administrators much easier and more convenient.</p><p>Cheers!</p>","published_at":"January 16, 2019","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"salesforce-custom-settings-a-godsend","previous":{"slug":"basic-lightning-components","title":"Getting Started with Lightning Components","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"photographs-valle-sagrado","title":"Peru's Valle Sagrado","primary_tag":{"name":"photos","slug":"photos"}}}}}