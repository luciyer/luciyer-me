{"componentChunkName":"component---src-templates-blog-post-js","path":"/admin-friendly-lightning-components-2","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Admin-Friendly Lightning Components","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/MSHppl9tloI?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>It’s not a secret that the default lightning component library is lacking in some basic things. But, luckily, we can build these basic things and make them really easy and flexible to use. I’ll show you how in this post.</p><p>Before we start, if you’re not familiar with lightning components, start with the post <a href=\"https://sfdc.guide/posts/basic-lightning-components/\">here</a>, designed to get you up to speed building a basic custom lightning component.</p><p>Okay, ready? Let’s get started.</p><h3 id=\"design-attributes\">Design Attributes</h3><p>To illustrate how a design file works and gives the administrator a way to proportion static values to a lightning component, let’s get started by creating a basic lightning component which will display static information for us.</p><p>Open up the Developer Console, and navigate to <strong><strong>File &gt; New &gt; Lightning Component</strong></strong>. Automatically an empty component (.cmp) will be created.</p><p>Within this component we’ll add our markup, but before we get there let’s create some <code>aura:attribute</code> elements to hold the values the user will set.</p><pre><code class=\"language-html\">&lt;aura:component implements=\"flexipage:availableForAllPageTypes\" access=\"global\"&gt;\n\n  &lt;aura:attribute name=\"show_icon\" type=\"Boolean\"/&gt;\n  &lt;aura:attribute name=\"icon_name\" type=\"String\"/&gt;\n  &lt;aura:attribute name=\"cmp_title\" type=\"String\"/&gt;\n  &lt;aura:attribute name=\"cmp_body\" type=\"String\"/&gt;\n  &lt;aura:attribute name=\"btn_title\" type=\"String\"/&gt;\n  &lt;aura:attribute name=\"btn_link\" type=\"String\"/&gt;\n\n  &lt;div class=\"slds-box slds-theme--default\"&gt;\n    &lt;!-- Markup will go here! --&gt;\n  &lt;/div&gt;\n\n&lt;/aura:component&gt;</code></pre><p>Cool, let’s pause here now and move on to the design tab. We’re ready to click on “Design” on the right-hand side.</p><p>And we’ll create a <code>design:attribute</code> for each <code>aura:attribute</code> we want the user be able to fill manually. In our case the entire element will be “static.”</p><pre><code class=\"language-html\">&lt;design:component&gt;\n\n  &lt;design:attribute name=\"show_icon\" label=\"Display Icon\" /&gt;\n  &lt;design:attribute name=\"icon_name\" label=\"Icon Name\" /&gt;\n  &lt;design:attribute name=\"cmp_title\" label=\"Title\" /&gt;\n  &lt;design:attribute name=\"cmp_body\" label=\"Content\" /&gt;\n  &lt;design:attribute name=\"btn_title\" label=\"Button Title\" /&gt;\n  &lt;design:attribute name=\"btn_link\" label=\"Button URL\" /&gt;\n\n&lt;/design:component&gt;</code></pre><p>Note that these look very similar to the <code>aura:attribute</code> elements we placed in the component markup, but we provide a label to each.</p><p>Now let’s go to the Salesforce setup and open the Lightning App Builder. From any lightning page, we can now see the component we created and place it (yes, it’s still empty) on a page.</p><p>On the right-hand side, we can see those fields we defined in the design file. Let’s add some values! <a href=\"https://www.lightningdesignsystem.com/icons/\">You can find lightning icons here</a>.</p><p>On the next page we’ll actually create the component itself!</p><h3 id=\"building-the-component\">Building the Component</h3><p>We still don’t actually have a lightning component. <em><em>But</em></em> we do now have some values, and we can see how this is working. The design file we created defines what will be shown in the Lightning App Builder to the administrator, and those values will be passed to the component itself and stored in those <code>aura:attribute</code> tags. Now, let’s make some markup for our custom component.</p><p>First, a title with our icon, which will only be shown if <code>show_icon</code> is checked.</p><pre><code class=\"language-html\">&lt;lightning:layout&gt;\n  &lt;aura:if isTrue=\"{!v.show_icon}\"&gt;\n    &lt;lightning:layoutItem&gt;\n      &lt;lightning:icon iconName=\"{!v.icon_name}\"/&gt;\n    &lt;/lightning:layoutItem&gt;\n  &lt;/aura:if&gt;\n  &lt;lightning:layoutItem padding=\"around-small\"&gt;\n    &lt;h2 class=\"slds-text-heading--medium\"&gt;{!v.cmp_title}&lt;/h2&gt;\n  &lt;/lightning:layoutItem&gt;\n&lt;/lightning:layout&gt;</code></pre><p>Alright, now the body and the button!</p><pre><code class=\"language-html\">&lt;lightning:layout&gt;\n  &lt;lightning:layoutItem padding=\"around-small\"&gt;\n    &lt;p class=\"slds-p-around_large\"&gt;{!v.cmp_body}&lt;/p&gt;\n    &lt;a href=\"{!v.btn_link}\" target=\"_blank\"&gt;\n      &lt;lightning:button \n        label=\"{!v.btn_title}\"\n        class=\"slds-align_absolute-center\"\n        variant=\"brand\"\n      /&gt;\n    &lt;/a&gt;\n  &lt;/lightning:layoutItem&gt;\n&lt;/lightning:layout&gt;</code></pre><p>And now we should see the following:</p><p>We could stop here, as we’ve created a useful component that any admin should be able to utilize on lightning pages without any code required.</p><p>On the next page, however, we’ll use CSS to make this component much more custom.</p><h3 id=\"stylesheets\">Stylesheets</h3><p>Let’s try out some different styles — maybe I want the inverse of what I have now, a “dark” theme?</p><p>I’ll click on <strong><strong>Style</strong></strong> on the right-hand side and the developer console will automatically generate an empty stylesheet for me.</p><p>And I’ll create the most basic “dark theme” I can:</p><pre><code class=\"language-css\">.THIS.dark-theme {\n  background: #1B4079;\n  color: #FFF;\n}\n\n.THIS.dark-theme button {\n  color: #1B4079;\n  background: #FFF;\n}</code></pre><p>and I’ll make sure that in my component markup, my container div has <code>dark-theme</code> added to its classes:</p><pre><code class=\"language-html\">&lt;div class=\"slds-box slds-theme--default dark-theme\"&gt;\n   [...]\n&lt;/div&gt;</code></pre><p>I personally think that looks pretty decent, and will definitely garner a bit more attention than the standard lightning theme. So we’ll stop here!</p><h3 id=\"conclusion\">Conclusion</h3><p>As we’ve seen in this post, we can use the design file to give administrators or users a way to define values used by a component by simply entering them into a form in the Lightning App Builder. Most of this is taken care of relatively seamlessly for us, all we need to make sure that we do is that we map aura:attribute tags with design:attribute tags where necessary.</p><p>We’ve also seen that we don’t need to settle for the default lightning styling — along with my other post on <a href=\"https://sfdc.guide/posts/custom-lightning-page-layouts/\">creating a custom lightning page layout</a>, you could create your own look and feel or company branding that suits you.</p><p>Hope this was helpful.</p>","published_at":"June 17, 2019","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"admin-friendly-lightning-components-2","previous":{"slug":"salesforce-acquires-tableau","title":"Salesforce Acquires Tableau!","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"a-new-series-conversations","title":"A New Series: Conversations","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}