{"componentChunkName":"component---src-templates-blog-post-js","path":"/everything-you-need-to-know-about-custom-objects","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Everything You Need to Know about Custom Objects","html":"<figure class=\"kg-card kg-embed-card\"><iframe src=\"https://www.youtube.com/embed/9iHFyzm2gIE?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\" name=\"fitvid0\" style=\"box-sizing: inherit; margin: 0px auto !important; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 20px; vertical-align: middle; position: absolute; top: 0px; left: 0px; width: 700px; height: 393.75px;\"></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>Salesforce’s custom objects are an administrator’s best friend, and the common acquaintance of the developer as well. Naturally, one of the great capabilities of Salesforce is its extensibility and customizability (is this a word?). There’s probably no better example of this extensibility than custom objects; being able to define a new database with all of its columns using only clicks and in a pretty user-friendly manner.</p><h3 id=\"video-breakdown\">Video Breakdown</h3><p>However, to properly create a custom object, you’ll need to understand the basic steps required – these steps include:</p><ul><li>Creating the object and its tab and making them available to users and within apps</li><li>Making custom fields, relating to other objects in the system, and setting up field tracking, if necessary</li><li>Creating list views and page layouts and confirming that related objects have related lists, if necessary</li><li>Integrating this custom object into workflows, processes, and logic — this, for example, could include using SOQL, Apex, or the REST API</li></ul><h3 id=\"lookup-vs-master-detail\">Lookup vs. Master-Detail</h3><p>I chose to give Opportunity and Invoice objects a master-detail relationship (and <em><em>not</em></em> a lookup).</p><p>I chose to do this because I want my invoices to be closely related to their parent opportunities, given that the invoices will be “bills” to that same customer. Because of this, in the video I mention that they’re intrinsically related; if I delete an opportunity, I probably don’t need to keep those invoices sitting around as they would if they were related by a lookup.</p><p>At the same time, I did choose to allow reparenting of invoices in the case that for some administrative reason I need to create a new Opportunity to replace the old, I don’t want to lose the related invoice history.</p><h3 id=\"code-snippets-from-the-video\">Code Snippets From the Video</h3><h4 id=\"soql-query\">SOQL Query</h4><pre><code class=\"language-sql\">SELECT Id, Name, Payment_Date__c, Amount__c, Status__c \nFROM Invoice__c \nWHERE Type__c = 'Incoming'</code></pre><h4 id=\"apex-insert\">Apex Insert</h4><pre><code class=\"language-java\">Invoice__c newInvoice = new Invoice__c( \n    Payment_Date__c = Date.Today(), \n    Type__c = 'Incoming', \n    Status__c = 'Sent', \n    Amount__c = 250.00, \n    Opportunity__c = '0061I000003cBem' \n    ); \ntry { \n\tinsert newInvoice; \n} catch (Exception e) { \n\tSystem.debug(e.getMessage()); \n}</code></pre><h4 id=\"rest-endpoint-url\">REST Endpoint URL</h4><p><code>/services/data/v43.0/sobjects/Invoice__c</code></p><h4 id=\"http-post-request-json-body\">HTTP POST Request JSON Body</h4><pre><code class=\"language-json\">{   \n    \"Payment_Date__c\" : \"2018-06-16\", \n    \"Type__c\" : \"Incoming\", \n    \"Status__c\" : \"Sent\", \n    \"Amount__c\" : 50.0, \n    \"Opportunity__c\" : \"0061I000003cBem\" \n}</code></pre><p>That’s all! Hope this was helpful.</p>","published_at":"June 21, 2018","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"everything-you-need-to-know-about-custom-objects","previous":{"slug":"writing-batchable-schedulable-apex-code","title":"Writing Batchable, Schedulable Apex Code","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"queueable-apex-classes","title":"Queueable Apex Classes: Beyond @future Methods","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}