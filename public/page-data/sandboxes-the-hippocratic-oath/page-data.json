{"componentChunkName":"component---src-templates-blog-post-js","path":"/sandboxes-the-hippocratic-oath","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Sandboxes & The Hippocratic Oath","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/DBOUxOrpgIE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>As I’ve just learned one minute ago, via Google, since I searched for it, <em><em>primum non nocere</em></em> is latin for “first, do no harm.” You might know this as a key part of the Hippocratic Oath – a pillar of medical ethics, the oath which every doctor might swear by.</p><p>As Salesforce administrators and developers, we don’t save lives, but we certainly can mitigate pain, and unfortunately, cause it. We have the power to facilitate and empower our users, or we have the power to make their lives needlessly complicated by rendering the tools they use each day opaque, inefficient, or just downright frustrating.</p><p>Usually, when any of the above are the case, it’s a question of improper or hasty testing, and a lack of discipline with regards to development best practices.</p><p>Though I’ve made many videos to date, I have yet to elaborate on my first ever post to this site, regarding <a href=\"https://sfdc.guide/posts/pushing-changes-properly/\">pushing changes properly</a>. Although that post was brief, it did mention that as administrators we must avoid at all costs to make changes directly to our production org wherever and whenever possible. So, today, in an effort to drive that point home, we discuss sandboxes: the different types, how to create and use them, and what do to when we’re ready to migrate a new feature into our production org.</p><p>On the next page, we’ll discuss the types of sandboxes and talk about which one you might want to employ.</p><h3 id=\"sandbox-types\">Sandbox Types</h3><p>There are four types of Sandboxes. They vary by three factors:</p><ol><li>Data Limits</li><li>Refresh Frequency</li><li>Availability</li></ol><p>First, let’s look at the data limits and refresh frequencies.</p><!--kg-card-begin: html--><table class=\"\"><tbody><tr><td><strong>Type</strong></td><td><strong>Data Limit</strong></td><td><strong>Refresh Frequency</strong></td></tr><tr><td>Developer</td><td>200MB</td><td>Daily</td></tr><tr><td>Developer Pro</td><td>1GB</td><td>Daily</td></tr><tr><td>Partial Copy</td><td>5GB</td><td>5 Days</td></tr><tr><td>Full Copy</td><td>Equal to Production Org</td><td>29 Days</td></tr></tbody></table><!--kg-card-end: html--><p>Now, let’s look at availability, which is based on your edition of Salesforce.</p><!--kg-card-begin: html--><table class=\"\"><tbody><tr><td><strong>Type</strong></td><td><strong>Pro</strong></td><td><strong>Performance</strong></td><td><strong>Unlimited</strong></td><td><strong>Enterprise</strong></td></tr><tr><td>Developer</td><td>10</td><td>100</td><td>100</td><td>25</td></tr><tr><td>Developer Pro</td><td>0</td><td>5</td><td>5</td><td>0</td></tr><tr><td>Partial Copy</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Full Copy</td><td>0</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><!--kg-card-end: html--><p>Salesforce notes that you can buy sandboxes as an add-on, if necessary.</p><p>Anyway, this information actually isn’t that useful to us right now, since we don’t know exactly what we want. The important point to make is that the type of Sandbox we choose to use for our development will be dependent on two factors:</p><ol><li>What is the scope of our development?</li><li>Which sandboxes are available to us?</li></ol><p>Based on the answers to the above questions, you can decide which suits you. To make a basic change like creating a new page layout and assigning it to specific users, we are probably just fine using a developer sandbox to be able to make sure the layout appears as we like and that it is assigned as we expect before we deploy it. However, if we’re building a custom app with custom code which has to process records asynchronously in batches, we might want a partial, if not full copy sandbox, and we may spend months building and writing test code before we even consider deploying to production.</p><p>Additionally, for undertaking a project that requires multiple developers or teams, and for replicating a development lifecycle, each developer may use a separate developer sandbox, then their disparate pieces may be migrated to a partial copy sandbox for testing, and then eventually a full copy sandbox as a final staging environment.</p><p>Ultimately, how you use sandboxes is up to you and your organization. On the next page, let’s take a look at how to create a sandbox.</p><h3 id=\"sandbox-creation\">Sandbox Creation</h3><p>From within our production org, let’s navigate to <strong><strong>Setup &gt; Sandboxes</strong></strong>.</p><p><em><em>Note: Developer edition Salesforce orgs do not avail sandboxes. If you don’t have access to a production org, consider <a href=\"https://www.salesforce.com/form/signup/freetrial-sales/\">spinning up a trial</a> and following along.</em></em></p><p>I’ll click <strong><strong>New Sandbox</strong></strong>, click <strong><strong>Next</strong></strong> under the type of sandbox I want, then click <strong><strong>Create</strong></strong>. It actually takes a while to spin up a sandbox, especially a partial copy or full copy sandbox. I spun up an Developer sandbox for this example, and it still took about 15 minutes to be ready. So be patient!</p><p>Great, got it? Now we’ll access our sandbox and do some development.</p><p>To log in, I need to navigate to <a href=\"https://test.salesforce.com/\">test.salesforce.com</a>, and enter my username and password. By default, salesforce will set your sandbox username by appending the name of the sandbox to your current username. I always get confused by this, so to keep track of logins I usually do the following:</p><p>If I have one production org and one sandbox, I try to use the same username but append .sb, for example:</p><ul><li><strong><strong>Production</strong></strong>: luc@sfdc.guide</li><li><strong><strong>Sandbox</strong></strong>: luc@sfdc.guide.sb</li></ul><p>If I’m using multiple sandboxes, I usually append the name of each at the end. Like:</p><ul><li><strong><strong>Production</strong></strong>: luc@sfdc.guide</li><li><strong><strong>Development</strong></strong>: luc@sfdc.guide.dev</li><li><strong><strong>Staging</strong></strong>: luc@sfdc.guide.staging</li></ul><p>You get the idea!</p><p>Once I’ve logged in, it’s time to develop and test our new component, solution, whatever it may be. We can breathe a sigh of relief knowing that no matter what we break in this org, our users won’t be affected. And if things get really dire, we can always “refresh” our sandbox to get back to a clean copy. Two <strong><strong>very important</strong></strong> notes:</p><ol><li>Refreshing a sandbox will erase and development that exists in your sandbox but <em><em>not</em></em> in your production org. Ie. if you wrote code in a sandbox that you never deployed, and you refresh that same sandbox, that code is lost.</li><li>If your sandbox project requires email to be sent, you’ll need to configure that yourself. By default, to avoid spamming users, sandboxes cannot send emails.</li></ol><p>If you watch the video, you’ll see that I develop a process builder instance (process? what are these called?) which makes a basic chatter post when a large opportunity closes. I won’t detail that process here since I have another post about <a href=\"https://sfdc.guide/posts/a-quick-look-at-process-builder/\">the process builder</a>, so let’s jump ahead to talking about change sets on the following page.</p><h3 id=\"change-sets\">Change Sets</h3><p>Once we’ve built something, and ideally tested it (including sufficient test coverage as required for Apex code), and we feel ready to migrate or deploy that new functionality, we can move it to another org using a changeset.</p><p>Changesets come in two flavors, inbound and outbound. These are pretty self-explanatory – inbound changesets are those entering an org (developed in an external org), outbound changesets are those leaving an org (to be implemented).</p><p>Navigate to <strong><strong>Setup &gt; Outbound Changesets</strong></strong> and create a new changeset. Give it a name, then Click <strong><strong>Add</strong></strong> under Changeset Components, and select the components that belong in the changeset. Make sure after doing this to click <strong><strong>View/Add Dependencies</strong></strong> to make sure you didn’t miss anything.</p><p>A quick note.. you might need to navigate <strong><strong>within your receiving org</strong></strong> to <strong><strong>Setup &gt; Deployment Settings</strong></strong> and enable your sandbox’s deployment connection.</p><p>After that, you should be able to move on. If this isn’t clear, check out the post’s video to see this process step-by-step.</p><p>The changeset will arrive almost immediately in the target organization, but it’ll take a while to actually load – ie. if you click on it, it’ll tell you it’s not ready yet. This is annoying. Depending on its size, it can definitely take minutes to an hour to propagate. After it appears, you can <strong><strong>Validate</strong></strong> and <strong><strong>Deploy</strong></strong>. I won’t go into which tests need to be run, as this depends heavily on what standards your organization enforces and what you’re actually deploying.</p><p>Last but not least, make sure to test! Remember that rolling back is <em><em>not</em></em> straightforward, especially for code changes, and that in these scenarios it’s very important to keep your code and metadata under version control to be able to deploy an older, stable version in the case of unforeseen issues.</p><p>Cheers!</p>","published_at":"June 10, 2019","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"sandboxes-the-hippocratic-oath","previous":{"slug":"web-to-case-forms","title":"Web-To-Case Forms","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"salesforce-acquires-tableau","title":"Salesforce Acquires Tableau!","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}