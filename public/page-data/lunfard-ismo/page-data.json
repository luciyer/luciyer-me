{"componentChunkName":"component---src-templates-blog-post-js","path":"/lunfard-ismo","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Lunfard + ismo","html":"<p>This month, I celebrate three years in Argentina. During these three years, I've had the pleasure and pain of learning a great deal of porte√±o slang. I figured there was an opportunity to do a simple COVID-quarantine project to record and build on this obscure vocabulary. </p><p>The first step was to build a backend. Which I've called \"ismo,\" because that's the back-end of the title of this post, and it's the corresponding Spanish suffix to \"ism.\"</p><p>My very simple data model defined an \"Entry.\" Like any dictionary, you need a word, a definition, a part of speech (noun, verb, etc.). Beyond those core parts, everything else is optional, to my mind. Providing a field for a phonetic (how the word is pronounced), an example, and a language/country of origin felt like useful additions. Tracking when a word was added and whether or not it was to be published, and generating a URL slug would be necessary for later building a UI.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const mongoose = require(\"mongoose\")\nconst slug = require(\"mongoose-slug-updater\")\n\nmongoose.plugin(slug)\n\nconst entry_schema = new mongoose.Schema({\n    \n  title: { type: String, required: true },\n  definition: { type: String, required: true },\n  part_speech: { type: String, required: true },\n    \n  phonetic: String,\n  example: String,\n  language: { type: String, default: \"Spanish\" },\n  country: { type: String, default: \"Argentina\" },\n  \n  slug: { type: String, slug: \"title\", unique: true },\n  created: { type: Date, default: Date.now },\n  published: { type: Boolean, default: true }\n    \n})\n\nexports.Entry = mongoose.model('Entry', entry_schema)</code></pre><figcaption>models/index.js</figcaption></figure><p>Well, that's pretty easy. </p><p>Now all that's left is to expose some endpoints and string them up. Here are some routes. </p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\n  \"entry\" : {\n    \"base\" : \"/api/entry\",\n    \"slug\" : \"/api/entry/:slug\"\n  }\n}</code></pre><figcaption>routes.json</figcaption></figure><p>I'd like to provide the ability to create a new entry, as well as to retrieve, update, or delete any specific entry, and I'd also like to be able to pull a listing of all entries. </p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-js\">const express = require(\"express\")\nconst bp = require(\"body-parser\")\n\nconst app = express()\n\n// [...]\n\napp.get(routes.entry.base, db.getAllEntries)\napp.post(routes.entry.base, db.createEntry)\n\napp.get(routes.entry.slug, db.retrieveEntry)\napp.patch(routes.entry.slug, db.updateEntry)\napp.delete(routes.entry.slug, db.deleteEntry)</code></pre><figcaption>server.js</figcaption></figure><p>Now I need to define those 5 functions - <code>getAllEntries</code>, <code>createEntry</code>, <code>retrieveEntry</code>, <code>updateEntry</code>, and <code>deleteEntry</code>.</p><p>For the sake of not pasting here what you can see by visiting the repository, let's walk through a single function - to create a new Entry in the database. </p><pre><code class=\"language-js\">exports.createEntry = (req, res) =&gt; {\n\n  Models.Entry.create(req.body)\n    .then(doc =&gt; {\n      console.log(doc)\n      res.status(200).json(doc)\n    })\n    .catch(err =&gt; {\n      console.error(err)\n      res.status(500).json(err)\n    })\n\n}</code></pre><p><code>Models.Entry</code> refers to the mongoose model we exported in <code>models/index.js</code>, displayed above. The <code>create</code> method returns a promise, meaning that when it is resolved or rejected we can return the response. </p><p>We create a new document passing the POST request body. That body might look like this:</p><pre><code class=\"language-json\">{ \"title\": \"Fiaca\", \"definition\": \"Laziness.\", \"part_speech\": \"Noun\" }</code></pre><p>Cool. So I'll write my other functions, and I'll have the world's simplest REST API for a dictionary app. I can fire up Postman and start testing. </p><p>Link to the full repo <a href=\"https://github.com/luciyer/ismo\">github.com/luciyer/ismo</a>.</p><p>Next up, the frontend. </p>","published_at":"June 17, 2020","tags":[{"name":"node","slug":"nodejs"}]}},"pageContext":{"slug":"lunfard-ismo","previous":{"slug":"switching-to-ghost","title":"Switching to Ghost","primary_tag":{"name":"node","slug":"nodejs"}},"next":{"slug":"memrze-diving-into-the-twitter-deep-end","title":"Space Cadet","primary_tag":null}}}}