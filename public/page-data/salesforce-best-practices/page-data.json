{"componentChunkName":"component---src-templates-blog-post-js","path":"/salesforce-best-practices","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"How to Practice Best Practices","html":"<h3 id=\"q-what-s-a-best-practice-and-what-s-a-best-practice-as-applied-to-salesforce-development\">Q: What’s a “best practice,” and what’s a “best practice” as applied to Salesforce development?</h3><p>First, a general explanation of a best practice.</p><p>A best practice is a widely-accepted, agreed-upon set of steps or procedures for solving a problem. The term is used in tons of different disciplines, but particularly in the software industry where complex projects require the inputs of many contributors.</p><p>Within the software industry, and within the world of Salesforce administration and development, the definition is even more narrow: a best practice refers to a rule (or a corollary to a rule) that we should not break.</p><p>So yes, these are Salesforce’s version of the ten commandments — though you have more than just a moral obligation to abide. If Salesforce development wrote a constitution, best practices would be the articles and the amendments and the preamble, all of it. They’re pretty damn important.</p><p>When we <em><em>follow</em></em> best practices, we avoid making the mistakes of our predecessors; we treat them as the principles that guide our actions as we build new functionality for our users. If <a href=\"https://sfdc.guide/posts/sandboxes-the-hippocratic-oath/\">sandboxes allow us to take a hippocratic oath to “first do no harm”</a>, best practices give us practical ways to obey such an oath.</p><p>Following best practices has positive externalities outside of the obvious benefit of helping us to not repeat mistakes; we generally end up with more efficient and secure code, and in turn we <a href=\"https://sfdc.guide/posts/whats-technical-debt/\">keep our technical debt at a manageable level</a>.</p><h3 id=\"examples-please-\">Examples, Please!</h3><p>You can find lots of lists of best practices in Apex development. I’ll give you an abbreviated version, the broader practices which each encompass more specific obligations:</p><ul><li>Bulkify your code</li><li>Separate your concerns</li><li>Set standards and conventions</li></ul><p>By bulkifying, we avoid code inefficiencies and respect <a href=\"https://sfdc.guide/posts/governor-limits-table-manners/\">governor limits</a>. Best practices such as “don’t query in a loop,” “one trigger per object,” and “use @future methods properly” are all really cases of code that isn’t written with efficiency in mind.</p><p>When we <a href=\"https://trailhead.salesforce.com/en/content/learn/modules/apex_patterns_sl/apex_patterns_sl_soc\">separate our concerns</a>, we break what we’re building into layers. This helps us to not write cryptic or inefficient code, to not repeat ourselves, and to create a system which others can more easily understand and expand upon.</p><p>By setting standards and conventions, such as naming conventions and code formatting standards, we keep our house in order. We make it easier to locate and update work we’ve already done, and we have a better idea of where new efforts fit into the schema we’ve already defined.</p><p>That’s all, cheers! <a href=\"https://sfdc.guide/conversations/\">Check out the other Conversations here.</a></p>","published_at":"July 22, 2019","tags":[{"name":"salesforce","slug":"salesforce"},{"name":"conversations","slug":"conversations"}]}},"pageContext":{"slug":"salesforce-best-practices","previous":{"slug":"batchable-apex-and-cuotas","title":"Batchable Apex & Cuotas","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"featured-by-mason-frank","title":"Featured by Mason Frank!","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}