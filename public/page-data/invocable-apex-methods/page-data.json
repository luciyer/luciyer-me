{"componentChunkName":"component---src-templates-blog-post-js","path":"/invocable-apex-methods","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Invocable Apex Methods","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/Rm3a_lWqPTI?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>Within Salesforce, it’s very frustrating that automatically generated emails (via workflow rules or the process builder) don’t automatically generate an activity record for the lead or contact to whom they’re sent.</p><p>We’ll solve this problem today and in the process learn how to use “invocable” Apex to extend the capabilities of the process builder!</p><h3 id=\"video-breakdown\">Video Breakdown</h3><p>In the video we will…</p><ul><li>Examine a shortcoming of the Salesforce platform out of the box</li><li>Set up an email alert via Workflow Rule</li><li>Set up and email alert via Process Builder</li><li>Build a simple invocable Apex method to extend the Process Builder and solve the aforementioned shortcoming</li></ul><h3 id=\"code-snippets-from-the-video\">Code Snippets From the Video</h3><pre><code class=\"language-java\">global class Invocable_SendEmailToLead {\n\n    global class DataWrapper {\n    \n        @InvocableVariable(label='Lead Record Id' required=true)\n        public String recordId;\n        @InvocableVariable(label='Email Template Id' required=true)\n        public String emailTemplateId;\n        \n    }\n    \n    @InvocableMethod(label='Send Email to Lead')\n    global static void sendMailToLead (List&lt;DataWrapper&gt; passedData) {\n        \n        // Send the mail!\n\n        for (DataWrapper dw: passedData) {\n            \n            \n            // Get the relevant template based on supplied ID.\n            EmailTemplate selectedTemplate = [SELECT Id FROM EmailTemplate WHERE Id =: dw.emailTemplateId];\n            \n            \n            // Create the SingleEmailMessage object and set the target and template.\n            Messaging.SingleEmailMessage mailToSend = new Messaging.SingleEmailMessage();\n            mailToSend.setTargetObjectId(dw.recordId);\n            mailToSend.setTemplateId(selectedTemplate.Id);\n            \n            // Send that email and debug the results!\n            List&lt;Messaging.SendEmailResult&gt; sendResults = Messaging.sendEmail(new List&lt;Messaging.Email&gt; { mailToSend });\n            System.debug(sendResults[0]);\n            \n            \n        }\n        \n    }\n    \n    \n}</code></pre><p>Just a quick note about the above code; ideally we don’t want to run a query whatsoever within the loop. For efficiency’s sake we should pull that query above the loop. This is just an example, so I won’t fix it here for the sake of keeping the code really simple.</p><p>Hope this helps!</p>","published_at":"October 22, 2018","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"invocable-apex-methods","previous":{"slug":"queueable-apex-classes","title":"Queueable Apex Classes: Beyond @future Methods","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"photographs-bay-of-all-saints","title":"Salvador's Bay of All Saints","primary_tag":{"name":"photos","slug":"photos"}}}}}