{"componentChunkName":"component---src-templates-blog-post-js","path":"/custom-lightning-page-layouts","result":{"data":{"site":{"siteMetadata":{"title":"luciyer.me"}},"ghostPost":{"title":"Custom Lightning (Home)Page Layouts","html":"<figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/ZM41VFiRYaY?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h3 id=\"introduction\">Introduction</h3><p>In order to accomplish a recent project, I had to develop a custom lightning page layout, or more specifically homepage layout. The default options that you have are pretty sparse (well, at least talking about homepage layouts, there’s only one), so if you want to do something cool for your users this will be a must. Luckily it’s not so difficult.</p><p>Before we start, if you’ve never built a lightning component before, <a href=\"https://sfdc.guide/posts/basic-lightning-components/\">you should start here</a>. This guide is a little more accelerated, assuming you’re already somewhat familiar with lightning component development.</p><h3 id=\"the-component\">The Component</h3><p>First off, your homepage layout is just going to be a new lightning component. So navigate to the developer console, and create a new lightning component (<strong><strong>File &gt; New &gt; Lightning Component</strong></strong>), and in the markup of the component itself, start here:</p><pre><code class=\"language-html\">&lt;aura:component implements=\"lightning:homeTemplate\" description=\"My Custom Layout\"&gt;\n\n&lt;/aura:component&gt;</code></pre><p>Alright, now each “section” of the page layout is actually stored in an attribute:</p><pre><code class=\"language-html\">&lt;aura:attribute name=\"header\" type=\"Aura.Component[]\" /&gt;\n\n&lt;aura:attribute name=\"left_col\" type=\"Aura.Component[]\" /&gt;\n&lt;aura:attribute name=\"mid_col\" type=\"Aura.Component[]\" /&gt;\n&lt;aura:attribute name=\"right_col\" type=\"Aura.Component[]\" /&gt;\n\n&lt;aura:attribute name=\"footer\" type=\"Aura.Component[]\" /&gt;</code></pre><p>Again, all of this goes within your component markup. I’ll post all of the code together at the end, but I want to continue piece-by-piece for now.</p><p>Now, the important and slightly more difficult part. You’ll need to create a <code>lightning:layout</code> with <code>lightning:layoutItem</code>. The way you create and nest these various items will determine how your page actually is physically structured. Let’s start really simple. I want a header which spans the entire width of the browser.</p><pre><code class=\"language-html\">&lt;div&gt;\n  &lt;lightning:layout&gt;\n    &lt;lightning:layoutItem size=\"12\" class=\"\"&gt;\n    {!v.header}\n    &lt;/lightning:layoutItem&gt;\n  &lt;/lightning:layout&gt;\n\n  &lt;!-- more markup here, soon --&gt;\n\n&lt;/div&gt;</code></pre><p>Great. See <code>size=\"12\"</code>? By default we will have a 12 column layout as has become pretty standard in CSS frameworks these days, and by setting our <code>size</code> attribute, we can decide how many of those columns this component will take up. Also notice <code>{!v.head}</code> inside of the <code>lightning:layoutItem</code>. This references the <code>aura:attribute</code> we defined earlier which had the type <code>Aura.Component[]</code> (an array of lightning components).</p><p>Now let’s get a little more complex.</p><pre><code class=\"language-html\">&lt;div&gt;\n\n  &lt;!-- Row 1 --&gt;\n  &lt;lightning:layout&gt;\n  \n      &lt;lightning:layoutItem size=\"12\" class=\"\"&gt;\n        {!v.header}\n      &lt;/lightning:layoutItem&gt;\n\n  &lt;/lightning:layout&gt;\n  \n  &lt;!-- Row 2 --&gt;\n  &lt;lightning:layout&gt;\n  \n      &lt;lightning:layoutItem size=\"{! $Browser.isDesktop ? '4' : '12' }\" class=\"\"&gt;\n        {!v.left_col}\n      &lt;/lightning:layoutItem&gt;\n\n      &lt;lightning:layoutItem size=\"{! $Browser.isDesktop ? '4' : '12' }\" class=\"\"&gt;\n        {!v.mid_col}\n      &lt;/lightning:layoutItem&gt;\n      \n      &lt;lightning:layoutItem size=\"{! $Browser.isDesktop ? '4' : '12' }\" class=\"\"&gt;\n        {!v.right_col}\n      &lt;/lightning:layoutItem&gt;\n      \n  &lt;/lightning:layout&gt;\n\n  &lt;!-- Row 3 --&gt;\n  &lt;lightning:layout&gt;\n  \n      &lt;lightning:layoutItem size=\"12\" class=\"\"&gt;\n        {!v.footer}\n      &lt;/lightning:layoutItem&gt;\n\n  &lt;/lightning:layout&gt;\n  \n\n&lt;/div&gt;</code></pre><p>Let’s try to explain what’s going on here, and what it will produce before we see it visually. Each <code>lightning:layout</code> block represents a row, and each <code>lightning:layoutItem</code> represents a column. Within the <code>size</code> attribute, we can use <code>$Browser.isDesktop ? [columns_if_true] : [columns_if_false]</code>to make this layout responsive. In this case, the columns will take up 4 columns on a desktop, or 12 on mobile (either 33% on desktop, or 100% on mobile.</p><p>On the next page, we’ll actually see our layout in action. But there’s still one more step that requires a tiny bit of code.</p><h3 id=\"the-design-file\">The Design File</h3><p>Now, let’s preview our layout so we can tweak, develop, or manipulate it as necessary. In order to preview it, we need to make it available to the Lightning App Builder. The way we do this is by defining a design file. We really just need to create a list of the different sections:</p><pre><code class=\"language-html\">&lt;design:component label=\"My Custom Homepage Layout\"&gt;\n  &lt;flexipage:template &gt;\n    &lt;flexipage:region name=\"header\" defaultWidth=\"Large\" /&gt;\n    &lt;flexipage:region name=\"left_col\" defaultWidth=\"Large\" /&gt;\n    &lt;flexipage:region name=\"mid_col\" defaultWidth=\"Large\" /&gt;\n    &lt;flexipage:region name=\"right_col\" defaultWidth=\"Large\" /&gt;        \n    &lt;flexipage:region name=\"footer\" defaultWidth=\"Large\" /&gt;\n  &lt;/flexipage:template&gt;\n&lt;/design:component&gt;</code></pre><h3 id=\"lightning-app-builder\">Lightning App Builder</h3><p>Save that file as well, and navigate to <strong><strong>Setup &gt; User Interface &gt; Lightning App Builder</strong></strong>. Create a <strong><strong>New</strong></strong> lightning page, click <strong><strong>Home Page</strong></strong>, give it a name, and you should see the option to select your custom layout in the following screen.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-1024x586.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-1024x586.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-1024x586.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-1024x586.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-1024x586.png 2400w\"></figure><p>We should see our layout!</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-1-1024x586.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-1-1024x586.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-1-1024x586.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-1-1024x586.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-1-1024x586.png 2400w\"></figure><p>From here, I can drag standard or custom components from the menu on the left and set the parameters of those components using the menu on the right.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-2-1024x586.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-2-1024x586.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-2-1024x586.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-2-1024x586.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-2-1024x586.png 2400w\"></figure><h3 id=\"the-svg\">The SVG</h3><p>Okay, one last thing to take care of. Let’s set up an icon for this layout so that when users select it, they have an idea of what the layout will look like. We’ll need to generate an SVG – I’ve used Adobe Illustrator to create an SVG which mimics the style of the default Salesforce layouts.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-3-1024x586.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-3-1024x586.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-3-1024x586.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-3-1024x586.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-3-1024x586.png 2400w\"></figure><p>If I export this as an SVG and actually open it with a text editor (I use Atom, but almost any will do), I’ll actually get a long string of code. My code is the following, just so you have an idea:</p><pre><code class=\"language-html\">&lt;svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\"&gt;\n    &lt;defs&gt;\n        &lt;style&gt;.cls-1{fill:#b3b3b3;}.cls-2{fill:#fff;}.cls-3{fill:#ccc;}.cls-4{fill:#566a8c;}&lt;/style&gt;\n    &lt;/defs&gt;\n    &lt;title&gt;Artboard 1&lt;/title&gt;\n    &lt;polygon class=\"cls-1\" points=\"1101.44 901 1056 901 1056 785 865 785 865 901 818.56 901 800 928 960 928 1120 928 1101.44 901\" /&gt;\n    &lt;rect class=\"cls-2\" x=\"464\" y=\"166\" width=\"992\" height=\"627\" rx=\"40.16\" /&gt;\n    &lt;path class=\"cls-3\" d=\"M1415.83,196A10.18,10.18,0,0,1,1426,206.16V752.84A10.18,10.18,0,0,1,1415.83,763H504.17A10.18,10.18,0,0,1,494,752.84V206.16A10.18,10.18,0,0,1,504.17,196h911.66m0-30H504.17A40.16,40.16,0,0,0,464,206.16V752.84A40.16,40.16,0,0,0,504.17,793h911.66A40.16,40.16,0,0,0,1456,752.84V206.16A40.16,40.16,0,0,0,1415.83,166Z\" /&gt;\n    &lt;rect class=\"cls-4\" x=\"515\" y=\"217\" width=\"890\" height=\"126\" /&gt;\n    &lt;rect class=\"cls-4\" x=\"515\" y=\"678\" width=\"890\" height=\"63\" /&gt;\n    &lt;rect class=\"cls-4\" x=\"515\" y=\"357\" width=\"283.61\" height=\"305\" /&gt;\n    &lt;rect class=\"cls-4\" x=\"816.61\" y=\"357\" width=\"283.61\" height=\"305\" /&gt;\n    &lt;rect class=\"cls-4\" x=\"1121.39\" y=\"357\" width=\"283.61\" height=\"305\" /&gt;\n&lt;/svg&gt;</code></pre><p>Within my developer console, I’ll click on <strong><strong>SVG</strong></strong>:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-4.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-4.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-4.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-4.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-4.png 2400w\"></figure><p>and I’ll remove the code they generated and paste my own in its place, leaving the <code>&lt;xml&gt;</code> tag alone.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-5-1024x586.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-5-1024x586.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-5-1024x586.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-5-1024x586.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-5-1024x586.png 2400w\"></figure><p>Done! Now when we go to create our custom homepage layout, we’ll be greeted by this view:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://159.203.118.11/content/images/wordpress/2019/05/image-6-1024x600.png\" class=\"kg-image\" srcset=\"http://159.203.118.11/content/images/size/w600/wordpress/2019/05/image-6-1024x600.png 600w, http://159.203.118.11/content/images/size/w1000/wordpress/2019/05/image-6-1024x600.png 1000w, http://159.203.118.11/content/images/size/w1600/wordpress/2019/05/image-6-1024x600.png 1600w, http://159.203.118.11/content/images/size/w2400/wordpress/2019/05/image-6-1024x600.png 2400w\"></figure><p>That’s it! Hope this was helpful, thanks for reading.</p>","published_at":"May 20, 2019","tags":[{"name":"salesforce","slug":"salesforce"}]}},"pageContext":{"slug":"custom-lightning-page-layouts","previous":{"slug":"quick-channel-update","title":"A Quick Channel Update","primary_tag":{"name":"salesforce","slug":"salesforce"}},"next":{"slug":"web-to-case-forms","title":"Web-To-Case Forms","primary_tag":{"name":"salesforce","slug":"salesforce"}}}}}